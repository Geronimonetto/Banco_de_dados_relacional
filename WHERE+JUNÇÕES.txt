- Para que serve uma clausula WHERE?
    O conceito do WHERE em banco de dados relacional funciona como um filtro para um SELECT
    fazendo isso conseguimos acessar um determinado conteudo que queremos em alguma tabela.
   ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Sintaxe do WHERE:
    * - serve para pegar todas as colunas da tabela
    SELECT * FROM nome_tabela WHERE filtro (podendo ser um codigo_id = numerodoid ou descricao = 'descricaodoproduto');

    NA PRATICA:

    SELECT numeros FROM tipo_numeros WHERE codigo = 1 - desse modo estou buscando a  - COLUNA numeros, TABELA tipo_numeros ONDE o codigo = 1;

    Podemos também apelidar as TABELAS:

    SELECT p.nome AS Nome FROM produtos AS p WHERE descricao = 'Computador';
    SELECIONE da TABELA produto a COLUNA nome e apelide como Nome DA TABELA produto Apelide como p ONDE descricao for igual a computador;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
- O que é uma consulta de multiplas tabelas? 
    É quando a coluna de uma tabela tem relação com outra tabela por exemplo:
    tabela produto tem o id do produto 1 que tem computador como descricao, e na tabela tipo de produto a relação dela com a tabela produto é justamente esse id do
    do produto que busca na tabela produto que produto é esse justo pelo id.

    NA PRATICA: 
    *SELECT p.nome AS produtos, t.nome AS TipodoProduto FROM produtos AS p, tipos_produtos AS t WHERE p.id = t.id_produtos;*
    SELECIONE da TABELA produto a COLUNA nome e Apelide como produtos na nova TABELA filtrada e também da TABELA tipo a COLUNA nome apelidar como TipodeProduto
    da TABELA produto apelidar como p ONDE o id de produtos for igual ao RELACIONAMENTO do id da TABELA tipo com a TABELA produto;


- O que é junção de tabelas?
    Junção de tabelas é justamente quando queremos unir os dados de 2 tabelas em uma nova, podendo ser com os dados filtrados ou de modo geral( Não recomendado )

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Existem alguns tipos de junções de tabelas:
    
    01. JUNÇÂO DE PRODUTO CARTESIANO - Uma junção de produto cartesiano é uma junção entre duas tabelas que origina uma terceira tabela 
    constituída por todos os elementos da primeira combinadas com todos os elementos da segunda, podendo ser feito de forma filtrada.

    NA PRATICA: 
    SELECT t.nome as Nome, f.nome AS Fabricantes FROM fabricantes AS f, tipo_produtos AS t WHERE t.id = f.id_tipos_produtos;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    02. JUNÇÂO INTERNA - Uma Junção Interna é caracterizada por uma seleção que retorna apenas os dados que atendem às condições de junção, isto é, quais 
    linhas de uma tabela se relacionam com as linhas de outras tabelas. Para isto utilizamos a cláusula ON, que é semelhante à cláusula WHERE.

    NA PRATICA:
    SELECT c.nome AS Nome, p.id_cliente AS Codigo_Cliente, p.num_pedido AS Numerodopedido FROM Clientes AS c INNER JOIN pedidos AS p WHERE c.id_cliente = p.id_cliente;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    03.JUNÇÂO EXTERNA (OUTER JOIN)- é uma seleção que não requer que os registros de uma tabela possuam registros equivalentes em outra. 

    A JUNÇÂO EXTERNA pode ser feita de 3 modos 
    
    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    LEFT OUTER JOIN que pega a primeira tabela e junta com uma segunda porém a preferência é a primeira ou seja a segunda mesmo que contenha dados NULL 
    virá do mesmo jeito sendo que com os valores vazios onde não tem nada.

    NA PRÁTICA: 

    SELECT c.nome AS Nome,c.sobrenome AS Sobrenome, p.compras AS ValordoProduto FROM cliente AS c LEFT OUTER JOIN produto AS p ON c.id = p.id_cliente;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    RIGHT OUTER JOIN  - Esta operação é inversa à anterior e retorna sempre todos os registos da tabela à direita (a segunda tabela mencionada na consulta), 
    mesmo se não existir registo correspondente na tabela à esquerda. Nestes casos, o valor NULL é retornado quando não há correspondência.

    NA PRÁTICA:

    SELECT * FROM clientes RIGHT OUTER JOIN profissao ON cliente.profissao = profissao.codigo;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    FULL OUTER JOIN - Esta operação apresenta todos os dados das tabelas à esquerda e à direita, mesmo que não possuam correspondência em outra tabela. A tabela 
    combinada possuirá assim todos os registros de ambas as tabelas e apresentará valores nulos para os registros sem correspondência.

    NA PRÁTICA: 

    SELECT * FROM clientes FULL OUTER JOIN profissao ON cliente.profissao = profissao.codigo;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------

    04.JUNÇÂO CRUZADA ( CROSS JOIN ) - A cláusula CROSS JOIN retorna todas as linhas das tabelas por cruzamento, ou seja, para cada linha da tabela esquerda queremos 
    todos os linhas da tabelas direita ou vice-versa. Ele também é chamado de produto cartesiano entre duas tabelas

    Parece complexo mas é basicamente assim 

    TABELA COMIDA                   TABELA VALOR 
    OVO                             20.00
    CARNE                           2.00
    GELEIA                          15.00

    TABELA CRUZADA
    OVO                             20.00
    OVO                             2.00
    OVO                             15.00
    CARNE                           20.00
    CARNE                           2.00
    CARNE                           15.00
    GELEIA                          20.00
    GELEIA                          2.00
    GELEIA                          15.00

    NA PRÁTICA: 

    SELECT c.nome AS Nomedoproduto, v.dinheiro AS Valor FROM carne AS c CROSS JOIN valor AS v;

    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    